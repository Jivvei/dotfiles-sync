# ===================================================================
# TMUX 配置文件 - 兼容性优化版本
# ===================================================================

# ===================================================================
# 基础设置 - 使用最兼容的终端类型
# ===================================================================

# 强制设置默认 shell 为 fish
set -g default-shell /usr/bin/fish
set -g default-command /usr/bin/fish

# 设置默认终端模式（使用最兼容的类型）
set -g default-terminal "screen-256color"

# 只在支持的终端上启用真彩色
set -ga terminal-overrides ",*256col*:Tc"
set -ga terminal-overrides ",alacritty:Tc"
set -ga terminal-overrides ",xterm*:Tc"

# 设置转义键延迟
set -sg escape-time 0

# 启用焦点事件
set -g focus-events on

# ===================================================================
# 会话和窗口设置
# ===================================================================

# 设置窗格和窗口编号从1开始
set -g base-index 1
set -g pane-base-index 1

# 自动重新编号窗口
set -g renumber-windows on

# 设置历史记录
set -g history-limit 500010

# 启用鼠标支持（增强版）
set -g mouse on

# 鼠标拖拽调整窗格大小
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M

# 双击选择单词，三击选择行
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; run-shell "sleep .5s" \; send -X copy-pipe-and-cancel "xclip -i -sel clipboard"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; run-shell "sleep .5s" \; send -X copy-pipe-and-cancel "xclip -i -sel clipboard"

# 中键粘贴
bind -n MouseUp2Pane run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# ===================================================================
# 窗格操作 - 垂直和水平分割
# ===================================================================

# 垂直分割 - 使用 | 键更直观
bind | split-window -h -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"

# 水平分割 - 使用 - 键更直观  
bind - split-window -v -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# 快速创建新窗口（保持当前路径）
bind c new-window -c "#{pane_current_path}"

# ===================================================================
# 窗格导航 - Vim 风格键位
# ===================================================================

# 窗格导航（保留原有功能）
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# 使用箭头键也可以导航（更直观）
bind Left select-pane -L
bind Down select-pane -D
bind Up select-pane -U
bind Right select-pane -R

# 窗格大小调整
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# 使用箭头键调整大小（按住Shift）
bind -r S-Left resize-pane -L 2
bind -r S-Down resize-pane -D 1
bind -r S-Up resize-pane -U 1
bind -r S-Right resize-pane -R 2

# ===================================================================
# 复制模式设置
# ===================================================================

# 进入复制模式
bind v copy-mode

# Vi 模式键位绑定
setw -g mode-keys vi
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# ===================================================================
# 快捷键配置
# ===================================================================

# 快速重新加载配置文件
bind r source-file ~/.tmux.conf \; display-message "✅ 配置已重新加载!"

# 显示快捷键提示 - 按 Ctrl+b 后按 ? 查看所有快捷键
bind ? list-keys

# 显示常用操作提示 - 按 Ctrl+b 后按 F1 显示帮助
bind F1 display-popup -E "echo '🔤 tmux 增强快捷键提示
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📐 窗格分割:
  |/\\\\    垂直分割    \"/%    水平分割

🧭 窗格导航:
  h/←      向左        j/↓     向下  
  k/↑      向上        l/→     向右

📏 窗格调整:
  H        向左扩展    J       向下扩展
  K        向上扩展    L       向右扩展
  Shift+方向键         精细调整

🖥️  窗口管理:
  c        新建窗口    N       命名新窗口
  ,        重命名窗口  Tab     上一个窗口
  Alt+1-9  快速切换    s       选择会话

🎛️  布局切换:
  Space    下一布局    Alt+1   水平均分
  Alt+2    垂直均分    Alt+3   主窗格水平
  Alt+4    主窗格垂直  Alt+5   平铺

🔧 实用功能:
  q        显示编号    i       窗格信息
  z        最大化      x       关闭窗格
  S        同步输入    r       重新加载
  ?        完整帮助    F1      此帮助

按任意键关闭...'; read"

# 在状态栏显示前缀键状态（这个配置会在后面的状态栏部分统一设置）

# 同步所有窗格输入（改进版）
bind S setw synchronize-panes \; display-message "#{?synchronize-panes,🔗 窗格输入已同步,❌ 窗格输入已取消同步}"

# 快速会话管理
bind s choose-tree -Zs  # 选择会话
bind w choose-tree -Zw  # 选择窗口

# 快速窗口切换（Alt + 数字）
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# 快速窗格操作
bind q display-panes -d 0  # 显示窗格编号（不自动消失）
bind Space next-layout      # 切换布局
bind o rotate-window        # 旋转窗格

# 复制到系统剪贴板（改进版）
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# 快速分割窗格到特定目录
bind '"' split-window -v -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

# 增强的窗格操作
bind m command-prompt -p "移动窗格到:" "move-pane -t %%"
bind M command-prompt -p "标记窗格为:" "select-pane -m"
bind P paste-buffer
bind b list-buffers
bind p choose-buffer

# 快速布局切换
bind M-1 select-layout even-horizontal
bind M-2 select-layout even-vertical
bind M-3 select-layout main-horizontal
bind M-4 select-layout main-vertical
bind M-5 select-layout tiled

# 快速重命名
bind , command-prompt -I "#W" "rename-window '%%'"
bind '$' command-prompt -I "#S" "rename-session '%%'"

# 快速新建带名称的窗口和会话
bind N command-prompt -p "窗口名称:" "new-window -n '%%'"
bind C-s command-prompt -p "会话名称:" "new-session -s '%%'"

# 窗格信息显示
bind i display-message "窗格: #{pane_index} | 大小: #{pane_width}x#{pane_height} | 路径: #{pane_current_path}"

# SSH主机信息快速显示（内置版本）
bind I display-popup -w 70 -h 20 -E '
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] || [ -n "$SSH_CONNECTION" ]; then
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "🔗 SSH 连接信息"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  [ -n "$SSH_CONNECTION" ] && echo "📱 连接: $SSH_CONNECTION"
  echo "🏷️  主机: $(hostname -f)"
  echo "👤 用户: $(whoami)"
  echo "📡 IP: $(hostname -I | cut -d\" \" -f1)"
  echo "⏰ 时间: $(date)"
else
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "🏠 本地连接信息"
  echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
  echo "🏷️  主机: $(hostname -f)"
  echo "👤 用户: $(whoami)"
  echo "📡 IP: $(hostname -I | cut -d\" \" -f1)"
  echo "🌍 网关: $(ip route | grep default | cut -d\" \" -f3)"
fi
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
read -p "按任意键关闭..."
'

# 快速切换到上一个窗口和会话
bind Tab last-window
bind BTab switch-client -l

# 高级命令面板（支持箭头键选择）
bind C-p display-menu -T "🎛️ tmux 命令面板" -x C -y C \
    "📝 新建窗口" 1 "new-window" \
    "🔄 重命名窗口" 2 "command-prompt -I '#W' 'rename-window %%'" \
    "📋 选择会话" 3 "choose-tree -Zs" \
    "🖥️ 新建会话" 4 "command-prompt -p '会话名称:' 'new-session -s %%'" \
    "🔗 切换同步" 5 "setw synchronize-panes" \
    "📏 均分布局" 6 "select-layout tiled" \
    "🔍 搜索窗口" 7 "choose-tree -Zw" \
    "💾 显示布局" 8 "display-message '布局: #{window_layout}'" \
    "📊 系统信息" 9 "display-popup -E 'htop -n 1 | head -20; echo; read -p \"按任意键关闭...\"'" \
    "❌ 关闭面板" 0 ""

# 快速命令执行
bind ! command-prompt -p "在所有窗格执行:" "run-shell 'for _pane in \$(tmux list-panes -F \"#{pane_id}\"); do tmux send-keys -t \$_pane \"%%\" Enter; done'"

# 终端工具面板
bind t display-menu -T "🖥️ 终端工具" -x C -y C \
    "📊 系统监控" 1 "new-window 'htop'" \
    "📁 文件管理" 2 "new-window 'ranger 2>/dev/null || ls -la'" \
    "🌐 网络状态" 3 "display-popup -E 'ss -tulpn && read'" \
    "🔍 进程查看" 4 "display-popup -E 'ps aux | head -20 && read'" \
    "📋 剪贴板" 5 "display-popup -E 'xclip -o && read'" \
    "⚙️ 系统信息" 6 "display-popup -E 'uname -a && uptime && read'"

# 手动刷新状态栏（用于SSH环境变化后）
bind r refresh-client

# 系统工具快捷键
bind S setw synchronize-panes \; display-message "#{?synchronize-panes,🔗 窗格输入已同步,❌ 窗格输入已取消同步}"

# 网络管理面板（支持箭头键选择）
bind C-h display-menu -T "🌐 网络工具" -x C -y C \
    "📊 网络状态" 1 "display-popup -E 'ss -tulpn && read'" \
    "📱 连接历史" 2 "display-popup -E 'last -a | head -20 && read'" \
    "🔐 SSH密钥信息" 3 "display-popup -E 'ls -la ~/.ssh/ && echo && ssh-add -l 2>/dev/null || echo \"没有加载的密钥\" && read'" \
    "🌍 网络诊断" 4 "display-popup -E 'ping -c 3 8.8.8.8 && echo && traceroute -m 5 8.8.8.8 2>/dev/null | head -10 && read'" \
    "📡 端口监听" 5 "display-popup -E 'ss -tulpn | grep LISTEN && read'" \
    "⚙️ SSH配置" 6 "split-window -h 'vim ~/.ssh/config'" \
    "🔄 刷新状态栏" 7 "refresh-client"

# 日志查看器
bind L display-menu -T "📜 日志查看" -x C -y C \
    "📊 系统日志" 1 "display-popup -E 'journalctl -n 50 --no-pager && read'" \
    "🔍 内核日志" 2 "display-popup -E 'dmesg | tail -30 && read'" \
    "🌐 SSH日志" 3 "display-popup -E 'journalctl -u ssh -n 20 --no-pager && read'" \
    "🐳 Docker日志" 4 "display-popup -E 'docker logs \$(docker ps -q) 2>/dev/null | tail -20 && read'" \
    "📈 实时日志" 5 "new-window 'journalctl -f'" \
    "⚠️ 错误日志" 6 "display-popup -E 'journalctl -p err -n 20 --no-pager && read'"

# 快速配置编辑
bind C-e split-window -h "cd ~/.tmux && \$EDITOR ~/.tmux.conf"

# 进程管理器
bind T display-menu -T "🔄 进程管理" -x C -y C \
    "📊 进程列表" 1 "display-popup -E 'ps aux --sort=-%cpu | head -20 && read'" \
    "💾 内存占用" 2 "display-popup -E 'ps aux --sort=-%mem | head -20 && read'" \
    "🔍 搜索进程" 3 "command-prompt -p '搜索进程:' 'display-popup -E \"ps aux | grep %% && read\"'" \
    "⚡ 系统监控" 4 "new-window 'htop'" \
    "🌐 网络连接" 5 "display-popup -E 'ss -tulpn && read'" \
    "🔧 服务状态" 6 "display-popup -E 'systemctl list-units --failed && read'"

# 网络监控
bind C-n display-menu -T "🌐 网络监控" -x C -y C \
    "📊 网络状态" 1 "display-popup -E 'ss -tulpn && read'" \
    "🔍 连接统计" 2 "display-popup -E 'ss -s && read'" \
    "📈 网络接口" 3 "display-popup -E 'ip addr show && read'" \
    "🌍 路由表" 4 "display-popup -E 'ip route && read'" \
    "🔧 网络诊断" 5 "display-popup -E 'ping -c 3 8.8.8.8 && read'" \
    "📡 实时监控" 6 "new-window 'watch -n 1 ss -tulpn'"

# Docker 集成
bind D display-menu -T "🐳 Docker 管理" -x C -y C \
    "📊 容器列表" 1 "display-popup -E 'docker ps -a && read'" \
    "📈 容器统计" 2 "display-popup -E 'docker stats --no-stream && read'" \
    "🌐 镜像列表" 3 "display-popup -E 'docker images && read'" \
    "🔍 容器日志" 4 "command-prompt -p '容器名:' 'display-popup -E \"docker logs %% && read\"'" \
    "⚡ 系统信息" 5 "display-popup -E 'docker system df && docker system info && read'" \
    "🔧 清理系统" 6 "display-popup -E 'docker system prune -f && read'"

# 快速搜索功能
bind / copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search down)" "send -X search-forward-incremental \"%%%\""
bind ? copy-mode \; command-prompt -i -I "#{pane_search_string}" -p "(search up)" "send -X search-backward-incremental \"%%%\""

# ===================================================================
# 状态栏配置 - 简化版
# ===================================================================

# 状态栏基础设置
set -g status on
set -g status-interval 5

# 确保SSH环境变量在tmux中可用
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AGENT_PID SSH_CONNECTION SSH_TTY WINDOWID XAUTHORITY"
set -g status-position bottom
set -g status-justify left

# 状态栏颜色 - 简化配色避免兼容性问题
set -g status-style 'bg=colour235,fg=colour136'

# 左侧状态栏 - 显示更多信息
set -g status-left-length 200
set -g status-left '#[bg=colour166,fg=colour235,bold] #S #[bg=colour235,fg=colour166]#{?client_prefix, 🔤 [等待命令] ,}#{?synchronize-panes, 🔗 [同步] ,} #[bg=colour240,fg=colour136] #I:#P '

# 右侧状态栏 - 简化系统信息显示
set -g status-right-length 200
set -g status-right '#[bg=colour235,fg=colour136] #(/home/Jiwei/.tmux/scripts/cpu_usage.sh) #[bg=colour235,fg=colour136] #(/home/Jiwei/.tmux/scripts/memory_usage.sh) #[bg=colour136,fg=colour235,bold] %H:%M #[bg=colour235,fg=colour166] #[bg=colour166,fg=colour235,bold] %d-%b-%y #[bg=colour235,fg=colour136] 🖥️ #{session_windows}W '

# 窗口状态栏格式
setw -g window-status-format '#[bg=colour240,fg=colour136] #I:#W '
setw -g window-status-current-format '#[bg=colour166,fg=colour235,bold] #I:#W '

# 窗格边框颜色
set -g pane-border-style 'fg=colour240'
set -g pane-active-border-style 'fg=colour166'

# 消息样式
set -g message-style 'bg=colour166,fg=colour235,bold'
set -g message-command-style 'bg=colour136,fg=colour235,bold'

# ===================================================================
# 高级功能
# ===================================================================

# 自动设置窗口标题（SSH感知）
setw -g automatic-rename on
set -g set-titles on
set -g set-titles-string '#{?SSH_CONNECTION,🌐 SSH: #{host_short},🏠 Local: #{host_short}} - #{window_name}'

# SSH环境下的窗口标题格式
setw -g automatic-rename-format '#{?SSH_CONNECTION,#{host_short}:#{pane_current_command},#{pane_current_command}}'

# 活动监控
setw -g monitor-activity on
set -g visual-activity off

# 时钟模式颜色
setw -g clock-mode-colour colour166

# ===================================================================
# 高级插件和自动化功能
# ===================================================================

# 会话管理（简化版）
bind C-r display-message "会话布局: #{window_layout}"
bind C-l choose-tree -Zs

# 快速环境预设（支持箭头键选择）
bind E display-menu -T "🚀 快速环境" -x C -y C \
    "💻 开发环境" 1 "rename-window 'DEV' ; split-window -h ; split-window -v" \
    "📊 监控环境" 2 "rename-window 'MON' ; new-window 'htop' ; new-window 'journalctl -f'" \
    "📜 日志查看" 3 "rename-window 'LOG' ; new-window 'tail -f /var/log/syslog'" \
    "🌐 网络工具" 4 "rename-window 'NET' ; new-window 'ss -tulpn' ; split-window 'ping 8.8.8.8'" \
    "🐳 Docker环境" 5 "rename-window 'DOCKER' ; new-window 'docker ps' ; split-window 'docker stats'" \
    "🔧 系统维护" 6 "rename-window 'SYS' ; new-window 'top' ; split-window 'iotop'" \
    "📁 文件管理" 7 "rename-window 'FILES' ; new-window 'ranger'" \
    "🔍 搜索工具" 8 "rename-window 'SEARCH' ; new-window 'fzf' ; split-window 'ag'"

# 系统监控集成（支持箭头键选择）
bind M display-menu -T "📊 系统监控" -x C -y C \
    "📈 CPU使用率" 1 "display-popup -E 'htop -d 1'" \
    "💾 内存使用" 2 "display-popup -E 'free -h && echo && ps aux --sort=-%mem | head -20 && read'" \
    "💽 磁盘空间" 3 "display-popup -E 'df -h && echo && du -sh /* 2>/dev/null | sort -hr | head -10 && read'" \
    "🌐 网络状态" 4 "display-popup -E 'ss -tulpn && echo && iftop -t -s 10 2>/dev/null || netstat -i && read'" \
    "⚡ 系统负载" 5 "display-popup -E 'uptime && echo && w && echo && read'" \
    "🔄 进程管理" 6 "display-popup -E 'ps aux --sort=-%cpu | head -20 && echo && read'" \
    "📊 完整监控" 7 "new-window 'htop' ; split-window 'iotop' ; split-window -h 'nethogs'" \
    "🔍 日志查看" 8 "display-popup -E 'journalctl -f --no-pager | head -50 && read'"

# 项目快速启动（支持箭头键选择）
bind P display-menu -T "🚀 项目启动" -x C -y C \
    "📁 切换到项目目录" 1 "new-window -c ~/projects" \
    "🌐 Web开发环境" 2 "rename-window 'WEB' ; new-window -c ~/projects ; split-window -h 'npm start' ; split-window -v" \
    "🐍 Python环境" 3 "rename-window 'PY' ; new-window -c ~/projects ; send-keys 'python3 -m venv venv && source venv/bin/activate' Enter" \
    "🦀 Rust环境" 4 "rename-window 'RUST' ; new-window -c ~/projects ; send-keys 'cargo new project && cd project' Enter" \
    "☕ Java环境" 5 "rename-window 'JAVA' ; new-window -c ~/projects ; split-window -h" \
    "🐳 Docker项目" 6 "rename-window 'DOCKER' ; new-window -c ~/projects ; send-keys 'docker-compose up' Enter ; split-window 'docker-compose logs -f'" \
    "📦 Node.js项目" 7 "rename-window 'NODE' ; new-window -c ~/projects ; send-keys 'npm init -y && npm install' Enter" \
    "🛠️ 通用开发" 8 "rename-window 'DEV' ; new-window -c ~/projects ; split-window -h ; split-window -v 'git status'"

# 快速笔记功能
bind n display-popup -E "/home/Jiwei/.tmux/scripts/quick_note.sh"

# Git 状态快速查看（支持箭头键选择）
bind g display-menu -T "🔧 Git 操作" -x C -y C \
    "📊 Git状态" 1 "display-popup -E 'git status && echo && git log --oneline -10 && read'" \
    "📈 Git日志" 2 "display-popup -E 'git log --oneline --graph -20 && read'" \
    "🔍 Git差异" 3 "display-popup -E 'git diff --stat && echo && git diff && read'" \
    "🌿 分支管理" 4 "display-popup -E 'git branch -a && echo && read -p \"切换到分支: \" branch && git checkout \$branch'" \
    "📥 拉取更新" 5 "display-popup -E 'git pull && read'" \
    "📤 推送代码" 6 "display-popup -E 'git push && read'" \
    "💾 快速提交" 7 "display-popup -E 'git add . && read -p \"提交信息: \" msg && git commit -m \"\$msg\"'" \
    "🔄 同步所有" 8 "display-popup -E 'git add . && git commit -m \"Auto commit\" && git pull && git push && read'"

# 文件管理器
bind f display-menu -T "📁 文件管理" -x C -y C \
    "📂 当前目录" 1 "display-popup -E 'ls -la && read'" \
    "🔍 查找文件" 2 "command-prompt -p '文件名:' 'display-popup -E \"find . -name \\\"*%%*\\\" 2>/dev/null && read\"'" \
    "📝 编辑文件" 3 "command-prompt -p '文件名:' 'split-window -h \"vim %%\"'" \
    "🗂️ 文件浏览器" 4 "new-window 'ranger 2>/dev/null || ls -la'" \
    "📊 磁盘使用" 5 "display-popup -E 'du -sh * 2>/dev/null | sort -hr | head -20 && read'" \
    "🔧 创建文件" 6 "command-prompt -p '文件名:' 'run-shell \"touch %%\"'" \
    "📁 创建目录" 7 "command-prompt -p '目录名:' 'run-shell \"mkdir -p %%\"'" \
    "🗑️ 删除文件" 8 "command-prompt -p '文件名:' 'run-shell \"rm -i %%\""'
